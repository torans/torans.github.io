<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>兰秋十六</title>
    <link>https://lanqiu.tech/</link>
    <description>Recent content on 兰秋十六</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <lastBuildDate>Mon, 06 Feb 2023 16:53:46 +0800</lastBuildDate><atom:link href="https://lanqiu.tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>冉氏宗谱修缮的草序</title>
      <link>https://lanqiu.tech/posts/for-genealogy/</link>
      <pubDate>Mon, 06 Feb 2023 16:53:46 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/for-genealogy/</guid>
      <description>随着时代的飞速发展，传统文化确在快速消失，我们不得不承认这一事实。族谱是传统文化的宝贵财富，后人能够继承和传承这种珍贵的文化，这是代代相传的精神财富。但如今它却正被渐渐抹杀，真令人不忍直视。我们得采取行动，确保宗谱文化能够得到传承，使之永葆昔日的荣光，永远珍藏于世人心中。
回忆儿时，天气好的时候，爷爷经常会坐在门口用皮纸自制书本、用毛笔誊书、抄写东西，当时很是费解。心想爷爷都一大把岁数了怎么也会有作业，他的老师又在哪里？为什么老师会要求他们用毛笔书写？为什么学校不给他们发放本子和铅笔等等，满脑子都是问号。随着慢慢地知事，爷爷会跟我讲各种故事，什么鹿溪黄林树本是一家、哪里曾经出现过秀才、什么老八房小八房、某某先祖埋葬在哪里、哪原本是一片茂密的大森林&amp;hellip;&amp;hellip;
似乎所有长辈都渴望自己的才能得以传承，我爷爷也不例外。在我连熟练握铅笔都困难的时候，他却试图教我怎么写钢笔字、毛笔字，常常搞得我跟刚钻完灶孔似的，满身墨水。慢慢地，爷爷也不再提防我靠近他的稿本和书籍，甚至会主动让我翻阅，测试我能否认识其书中文字。偶尔教我一些“厉害”的汉字，能让我在同学们前炫耀好几天。彼时，我依旧无法理解爷爷，为什么一大把年纪还要记录那些无用且深奥的东西，甚至产生了厌倦行李。
后来，爷爷抄写的频率渐渐变少了，更多的是在门前翻阅自己曾经记录的书本，时而皱眉，时而叹息。依稀记得高二那年寒假回家，我和爷爷坐在火边烤火，爷爷照例跟我们讲故事，依旧讲的是鹿溪考中文秀才的故事，只是语速越来越慢，甚至连故事情节都发生了变化，把考中秀才说成了考上清华大学，也是那时我发现爷爷那长长的眉须早已变得雪白。我突然明白，爷爷老了。直到上大一那年，爷爷永远离开了我们，我能肯定爷爷终究是带着遗憾走的，因为我与“清华”的直线距离可达2000多公里。
一瞬间，秒针就转过了一圈。一翻篇，日子就走过了十年有余。去年年底因疫情居家办公，恰逢堂叔给幺爷奶立碑佳期，作为晚辈的我自然在场尽孝。当天，在场的人们对位于幺爷奶墓旁的一座古墓很感兴趣，有人说墓主人是青杠园的先祖、有人说是本寨某某祖先，众说纷纭。与此同时，我和堂哥在附近泥土中隐约有一坟茔，清理出碑文后发现是一座距今约210年的古墓，由于早无世孙朝见，也不知是哪家的先祖、后继是否有人，完全无法考证，众人深感惋惜。
回家后，在好奇心驱使下翻箱倒柜祭出爷爷留下的书籍，想对上述坟茔查个究竟。遗憾的是发现众多书中记载的内容并非完整，回想儿时爷爷边写书时边叹气的场景，我想爷爷也常会遇到类似的无奈场景。
兴趣是最好的老师，索性一不做二不休，到处寻找各种田野资料、斋谱、老家谱、残破古籍等。乃至串门走访调查、上山寻坟查茔、上网查询文献等一切力所能及的方式收集更多全面有用的信息。经过百般努力终于整理成谱。
事实上，收集和梳理家族信息确实并非易事。好在得到了前辈们、有识人士、以及众多父老乡亲的帮助和鼓励，能顺便完成本谱的编辑工作，如若没有他们的支持，势必会更加艰难，再此表示感谢。由于时间和精力有限，且可供参考资料依旧不够充分，难免存在错误和遗漏的地方，还望大家多多补充和指正。
于2023年1月30日书于贵阳</description>
    </item>
    
    <item>
      <title>实现Web3的核心要素：区块链、加密资产、智能合约和预言机</title>
      <link>https://lanqiu.tech/posts/the-core-elements-of-web3/</link>
      <pubDate>Mon, 17 Oct 2022 11:09:30 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/the-core-elements-of-web3/</guid>
      <description>Web3的核心要素：区块链、加密资产、智能合约和预言机
Web3模式的去中心化技术栈不断发展壮大，涵盖区块链、智能合约、预言机、加密钱包以及存储网络等各种技术。下文将详细阐述Web3技术栈的关键构成要素。
区块链 区块链是安全性和去中心化水平都极高的网络，人们可以在一个共享账本中储存数据、交换价值并记录交易活动，而且这个账本不受任何中心化实体控制。区块链网络是Web3的支柱，提供了安全的执行层，可以在其中创建、发行并交易加密资产，并且开发可编程的智能合约。区块链是Web3的结算层。
加密资产 加密资产是数字通证，利用了去中心化且防篡改的区块链网络环境，充分保障了交易的安全性。加密资产是Web3去中心化应用（dApp）的原生货币，也可以用于支付Web3服务并参与Web3治理。
在区块链技术出现以前，通证往往指用来购买和交易产品或服务的价值单位，比如高速公路收费站的通行证、游乐园的门票和游戏代币。在这些早期用例中，服务提供方通过发放通证，让用户直接提前支付服务费用。
Web3应用中的通证也是发放给Web3内容创作者的价值单位，但区别是这些价值单位是以数字化且可编程的形式存在的，而且其功能远不止价值交换。在Web3中，通证可以表示对某一协议、项目或区块链的投资。通证也可以在这个项目或协议中用来支付或保障服务。另外，通证还可以让持有者参与到协议或项目的治理。
智能合约和去中心化应用（dApp） 智能合约是区块链上不可篡改的程序，利用“如果x是真实的，则执行y”的代码逻辑自动执行交易。可编程的智能合约可以创建去中心化的应用，或者叫“dApp”。去中心化应用是基于加密经济的协议，为Web3的发展奠定了基础，并将Web3交付到了用户手中。
dApp与Web 2.0的应用以及Web 1.0的静态HTML网页不一样，它们不由任何一个人或组织运行，而是由去中心化的区块链网络运行。去中心化应用看似简单，但却能够打造出点对点金融服务（DeFi）、数据驱动的保险产品以及P2E游戏等非常复杂的自动化系统。
预言机 智能合约要充分实现其潜力，就必须能够与区块链网络以外的数据和系统交互。预言机能够将区块链连接至真实世界中的数据和系统，并提供关键的基础架构，打造一个具有互操作性且统一的Web3生态。
Chainlink预言机网络不仅能够为DeFi应用传输金融市场数据，还能够执行一系列安全的链下计算，比如可验证的随机数和去中心化执行，以最终实现动态NFT以及自动化水平极高的dApp。另外，随着跨链互操作性协议（CCIP）的不断发展，预言机网络将连接各个快速发展的区块链生态和L2扩容方案，使其安全地实现交互。
预言机对Web3技术栈进行了扩充，传输链下数据和服务，以推动智能合约创新；实现跨链互操作性，以确保各条区块链无缝连接。Chainlink的预言机基础架构也为Web 2.0后端系统进入Web3世界提供了入口，为传统系统提供抽象层，轻松接入任何公链和私有链。最终，预言机将为传统系统带来去中心化计算和加密保障，并在Web 2.0和Web3之间搭建桥梁。
Web3由去中心化的计算网络组成，这些网络通过Chainlink预言机连接。
Web3的应用
Web3兼具去中心化和交互性，打造了一个全新的互联网模式。在其中，用户可以绕过中介直接交互。dApp用户无需许可即可访问金融工具，以点对点的方式交易加密资产，获得参数型保险理赔，通过NFT交易可验证所有权的数字艺术品，并且在游戏中赚钱。所有这些活动都可以完全绕过中间方直接展开。
Web3的建设者希望通过这个创新的架构，打造出更加公平和开放的互联网，用户可以在其中直接展开交互和交易。目前，采用了区块链、智能合约和去中心化预言机网络这三种核心技术的Web3应用已经实现了丰富的用例，颠覆了房地产、教育、金融、游戏和医疗等各个行业，并势必在未来将颠覆更多其他行业。
去中心化金融
Web3技术让个人可以创建并参与金融协议，并实现了前所未有的包容性、安全性和透明性。这种创新的经济模式还有一个广为人知的名字，那就是去中心化金融（DeFi）。
DeFi协议与传统金融服务不同，利用了去中心化的区块链基础设施以及预言机安全的数据输入，帮助用户在透明且防篡改的链上市场中直接交易。用去中心化的货币市场Aave举个例子：Aave集成了Chainlink预言机后为智能合约保障了超过120亿美元的价值。协议采用了非托管的模式，其用户可以点对点地进行借贷。货币市场是经济健康运行的关键支柱。链上货币市场将控制权去中心化，并且利用了预定义的智能合约逻辑，能够降低参与门槛和单点失效风险，并避免系统性风险和储备金不足的情况。
DeFi最大的一个创新就是可组合性。开发者可以将不同的开源协议组合成一个更加复杂的金融工具，比如利用超额抵押贷款协议打造无损储蓄游戏、开发去中心化stablecoin以及盘活闲置资金生成利息收益。
DeFi的创新金融应用是目前Web3最引人注目的发展，然而Web3远不止金融交易，还包括互联网世界中从娱乐到社交媒体再到浏览器等各个领域。
NFT、游戏和元宇宙
NFT、区块链游戏和元宇宙（metaverse）是Web3生态中异军突起的力量。NFT为数字资产提供了可验证的所有权，让这些数字商品拥有与实物资产同样的独特性。有了NFT，数字资产即使外观一模一样，也可以互相区分开来，这就像现实世界中两本一模一样的书可以通过它们各自独特的标记和磨损痕迹区分开来。
这对于数字艺术品、元宇宙应用和游戏来说意义重大。目前，Bored Ape Yacht Club（BAYC）等NFT项目正在不断推广NFT和数字艺术品；而Axie Infinity等区块链游戏也在逐渐颠覆传统游戏行业的玩家经济模式。实现这一转型在本质上需要区块链提供底层结算层、NFT智能合约提供可验证的艺术品所有权以及去中心化的预言机提供可验证的随机数、智能合约自动化和链下数据等关键服务。
参数型保险
去中心化参数型保险是区块链另一个有意思的用例。Arbol和Etherisc等区块链保险项目目前正在采用创新的模式，通过Chainlink Data Feeds将智能合约接入链下数据，为用户提供自动化的农作物保险和航班保险等各类创新保险产品。我们来看一个案例：
假设某一季节中的降雨量必须超过20英寸，才能保障农作物不欠收。一个农民希望买保险来对冲恶劣天气造成的不利影响。通常，他必须要经过漫长的理赔流程，并且要依靠中心化的保险机构来核实降雨量。
然而在Web3的世界里，无论你在什么地方，只要能上网，都能轻松买到保险。有了Arbol的链上农作物保险，保费和赔偿金额都会基于预定义的参数自动生成，并且会基于Chainlink提供的天气数据，通过保险智能合约自动支付赔偿金。因此，保险流程会非常高效迅速，并基于简单的二元逻辑判断农民是否应获得理赔。物联网传感器在当季记录的降雨量是否低于20英寸？如果是，则立即支付赔偿金给农民。如果否，则不支付赔偿金给农民。
这个模式还可以应用于航运险和火灾险等其他领域，而区块链参数保险目前已经应用在了参数型航班保险中。
Web3的未来将如何发展？
Chainlink的联合创始人Sergey Nazarov在近期关于Chainlink未来发展的演讲中提到，Web3生态的大趋势已经形成，并且在近期进入了主流视野：“如今Web3的应用场景覆盖了DeFi、NFT和通证化所有权这几个领域，但是这一切才刚开始。现在仍是加密技术发展的初期，之后这项技术会渗透至人们日常生活的方方面面以及所有行业的各个角落。”
随着大家逐渐意识到加密技术的力量，它们将抛弃缺乏确定性的中心化服务提供方，转而拥抱信任最小化的Web3服务。
Web3这个词实际上指代了基于去中心化技术的新型互联网体验。而Web3已经开始颠覆我们在投资、交易、游戏和艺术等各个领域的交互方式。全球各地有越来越多的用户和机构已经开始意识到无须信任的交互和基于加密技术保障的协议是多么重要。虽然Web3仍处于发展初期，但它有潜力将互联网恢复成当初设计者所希望的那样：完全透明、可靠且易于使用。Sergey在演讲中说道：“Web3在速度、效率和成本上将逐渐赶上Web 2.0系统，并且它还具有Web 2.0没有的优势，那就是信任最小化的加密保障。”
文章来源：https://new.qq.com/rain/a/20220907A04Q0J00</description>
    </item>
    
    <item>
      <title>本博客正式迁移至IPFS去中心化网络</title>
      <link>https://lanqiu.tech/posts/deploy_blog_on_ipfs/</link>
      <pubDate>Mon, 25 Jul 2022 17:23:30 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/deploy_blog_on_ipfs/</guid>
      <description>本站点正式迁移至IPFS去中心化网络上。
CID:QmW1j7chWbjySXHCE5bA75UfSbS5x6wkNtegrDpyiGjzxt</description>
    </item>
    
    <item>
      <title>《精通以太坊——实现数字合约》中文版</title>
      <link>https://lanqiu.tech/posts/ethereum_book/</link>
      <pubDate>Tue, 19 Jul 2022 16:08:20 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/ethereum_book/</guid>
      <description>
前言 术语 第一章 什么是以太坊 第二章 以太坊基础 第三章 以太坊客户端 第四章 以太坊测试网 第五章 密钥和地址 第六章 钱包 第七章 交易 第八章 智能合约 第九章 开发工具，框架和库 第十章 代币（Tokens） 第十一章 去中心化应用（DApps） 第十二章 预言机（Oracles） 第十三章 燃气（Gas） 第十四章 以太坊虚拟机 第十五章 共识 第十六章 Vyper：面向合约的编程语言 第十七章 DevP2P协议 第十八章 以太坊标准 第十九章 以太坊分叉历史 </description>
    </item>
    
    <item>
      <title>K8S删除状态为Evicted的Pod</title>
      <link>https://lanqiu.tech/posts/delete_evicted_pod/</link>
      <pubDate>Fri, 01 Jul 2022 09:47:31 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/delete_evicted_pod/</guid>
      <description>eviction即驱赶的意思。当节点出现异常的时候，k8s根据机制驱赶该节点上的Pod（多见于资源不足时导致的驱赶）。
删除驱赶产生的遗留Pod.
方法一： kubectl get pods | grep Evicted | awk &amp;#39;{print $1}&amp;#39; | xargs kubectl delete pod 方法二： kubectl get pods --all-namespaces -o json | jq &amp;#39;.items[] | select(.status.reason!=null) | select(.status.reason | contains(&amp;#34;Evicted&amp;#34;)) | &amp;#34;kubectl delete pods \(.metadata.name) -n \(.metadata.namespace)&amp;#34;&amp;#39; | xargs -n 1 bash -c </description>
    </item>
    
    <item>
      <title>NVIDIA NVML Driver/library version mimatch 解决办法</title>
      <link>https://lanqiu.tech/posts/nvml_driver_version_mismatch/</link>
      <pubDate>Fri, 24 Jun 2022 11:30:53 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/nvml_driver_version_mismatch/</guid>
      <description>###问题描述：执行nvidia-smi命令的时候出现一下错误：
root@localhost:/mnt/md0/lotusWorker# nvidia-smi Failed to initialize NVML: Driver/library version mismatch 解决办法：卸载原先加载的驱动 sudo rmmod nvidia_drm sudo rmmod nvidia_uvm sudo rmmod nvidia_modeset sudo rmmod nvidia # 再次执行nvidia_smi </description>
    </item>
    
    <item>
      <title>核弹级教程：手把手教你白嫖上百个订阅节点</title>
      <link>https://lanqiu.tech/posts/get_free_proxies/</link>
      <pubDate>Sat, 12 Mar 2022 15:24:45 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/get_free_proxies/</guid>
      <description>名词解释 爱折腾的小伙伴，对节点、Clash、Surge 之类的词都再熟悉不过了吧？ 梯子的工具随手可见，但是节点——如果不（yi）想（mao）破（bu）费（ba）的话——找起来并不是那么顺利。 因为大部分的免费节点，都需要挂上梯子去搜，陷入了无限循环。所以今天给大家介绍一个快速、免费、持久地获取节点订阅链接的终极解决方案！ PS：本文只提供思路，和具体操作，没有现成的链接。
总体思路 proxypool 的大名，想必大家都听说过。这是一个 go 语言开发的节点爬虫，部署在服务器上就能爬取各种来源的免费节点，并且提供测速、筛选等功能。
那么我们在没有服务器、不会自己搭建的时候，是不是可以白嫖别人的呢？答案是肯定的！
方法 1： proxypool 默认使用的是 12580 端口，所以我们只要大量扫描 IP 端口，然后逐个尝试，总会抓到很多个 IP。
方法 2： proxypool 前端页面的 title，默认是 “Free Proxies”，所以搜索这个关键字，也可以找到无数个搭建好的爬虫。
一种实现 上文提到的两种方法，固然我们可以自己慢慢来，但不是每个人都有耐心。这里给大家提供一个简单的思路。
首先我们打开 zoomeye.org
然后搜索 title:&amp;ldquo;Free Proxies&amp;rdquo; port:12580
搜索结果里的 ip，十有八九是搭建了 proxypool 的服务器，我们随便选几个打开试试。 好几千个节点，都已经赤裸裸地摆在你面前了！而且Clash配置文件、小火煎、sugre配置一应俱全！
如果使用的是其他客户端，还可以用下方的订阅链接来实现。
PS：如果IP打不开，可以试试加上端口12580，或者在ip旁边的文本框里找它的域名！
一点忠告 互联网不是法外之地。你的服务器在做什么，你在互联网上的一言一行，全都被别人看在眼里。所以还是低调，小心为妙。</description>
    </item>
    
    <item>
      <title>外部Prometheus监控k8s（k3s）集群</title>
      <link>https://lanqiu.tech/posts/local_prometheus_to_monitor_k8s_or_k3s_cluster/</link>
      <pubDate>Thu, 24 Feb 2022 15:39:20 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/local_prometheus_to_monitor_k8s_or_k3s_cluster/</guid>
      <description>通过prometheus监控kubernetes时，在一些实际环境中，会存在把prometheus 部署到kubernetes集群外部，这时需要事先提供token和ca文件来做到自动发现。
具体操作步骤：
创建monitor 命名空间： kubectl create namespace monitor 部署GPU-exporter 编写yaml文件
这里使用了节点亲和性，需要为gpu节点添加 gpu:true 的 标签
#gpu_exporter-daemonSet.yaml apiVersion: apps/v1 kind: DaemonSet metadata: namespace: monitor labels: app: gpu-exporter name: gpu-exporter spec: selector: matchLabels: app: gpu-exporter template: metadata: labels: app: gpu-exporter spec: affinity: nodeAffinity: requiredDuringSchedulingIgnoredDuringExecution: nodeSelectorTerms: - matchExpressions: - key: gpu operator: In values: - &amp;#34;true&amp;#34; hostPID: true hostIPC: true hostNetwork: true containers: - image: gpu_exporter:latest imagePullPolicy: Always name: gpu-exporter ports: - containerPort: 9445 name: gpu-port protocol: TCP resources: requests: cpu: 100m limits: cpu: 100m memory: 200Mi restartPolicy: Always serviceAccountName: &amp;#34;&amp;#34; imagePullSecrets: - name: &amp;lt;image-pull-secrets&amp;gt; 集群导入配置文件执行 kubectl apply -f gpu_exporter-daemonSet.</description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://lanqiu.tech/tags/</link>
      <pubDate>Mon, 21 Feb 2022 22:42:59 +0800</pubDate>
      
      <guid>https://lanqiu.tech/tags/</guid>
      <description></description>
    </item>
    
    <item>
      <title>【Golang】Mac下编译可以在linux下运行的程序</title>
      <link>https://lanqiu.tech/posts/build-go-project-for-linux-on-mac/</link>
      <pubDate>Mon, 21 Feb 2022 22:27:54 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/build-go-project-for-linux-on-mac/</guid>
      <description>在mac下直接使用go build编译出来的文件在linux下无法运行，因此需要使用其他方法编译，执行下面的命令即可：
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go 该命令会下载相应的包,然后可以看到编译成功。</description>
    </item>
    
    <item>
      <title>开篇日记</title>
      <link>https://lanqiu.tech/posts/first/</link>
      <pubDate>Mon, 21 Feb 2022 17:53:10 +0800</pubDate>
      
      <guid>https://lanqiu.tech/posts/first/</guid>
      <description>也不知道是第几次搭建独立博客了，希望这是最后一次折腾了。 多年的技术从业经历使我早已明白，作为靠技术技能吃饭的我，必须不断通过 学习来提升自己，否则终将被淘汰。
可不得不承认的是，在科技飞速发展的 今天，随着年龄的增长，以前的碎片化学习方式必定显得愈发吃力。所以，我 需要一个东西来记录我的学习记录，同时也希望能分享有意思的内容给各位朋友。 这就是我思考再三，还是决定重开博客的原因。
go!go!</description>
    </item>
    
    <item>
      <title>兰秋十六(Lan Qiu)</title>
      <link>https://lanqiu.tech/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lanqiu.tech/about/</guid>
      <description> About Me: 码农，伪全栈。 90后油腻大叔，性别男，爱好女。 嗯～ 闷骚！放荡不羁爱自由。 喜欢旅行 &amp;amp; 书法 &amp;amp; 篮球 &amp;amp; 听音乐。 大学本科 - 计算机科学与技术。 Location: Guiyang, Guizhou, China. Skills： Kubernetes Docker Python Golang PHP Vue Networks: twitter.com/lanqiu_tech facebook.com/shetu.cc github.com/torans </description>
    </item>
    
    <item>
      <title>文章归档4</title>
      <link>https://lanqiu.tech/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lanqiu.tech/archive/</guid>
      <description>历史文章按照年月归档.</description>
    </item>
    
    <item>
      <title>文章归档4</title>
      <link>https://lanqiu.tech/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lanqiu.tech/archive/</guid>
      <description>历史文章按照年月归档.</description>
    </item>
    
  </channel>
</rss>
